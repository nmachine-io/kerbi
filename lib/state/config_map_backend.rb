module Kerbi
  module State

    ##
    # Treats a Kubernetes configmap in a namespace as a
    # persistent store for state entries. Reads and writes
    # to the configmap.
    class ConfigMapBackend < Kerbi::State::BaseBackend
      include Kerbi::Mixins::CmBackendTesting

      attr_reader :auth_bundle
      attr_reader :namespace

      # @param [Hash] auth_bundle generated by Kerbi::Utils::K8sAuth
      # @param [String] namespace Kubernetes namespace where configmap lives
      def initialize(auth_bundle, namespace)
        @auth_bundle = auth_bundle.freeze
        @namespace = namespace.freeze
      end

      ##
      # Checks for the namespace and configmap, creating along
      # the way if missing. Does not raise if already exists.
      # @param [Hash] opts for things like verbose
      def provision_missing_resources(opts={})
        create_namespace unless (ns_existed = namespace_exists?)
        puts_init("namespaces/#{namespace}", ns_existed, opts)

        create_resource unless (cm_existed = resource_exists?)
        puts_init("#{namespace}/configmaps/#{cm_name}", cm_existed, opts)
      end

      ##
      # Creates the configmap with 0 entries.
      def create_resource
        apply_resource(template_resource([]))
      end

      ##
      # Creates the configmap given an exact dict representation
      # of its contents.
      # @param [Hash] resource_desc
      def apply_resource(resource_desc)
        #noinspection RubyResolve
        client("v1").create_config_map(resource_desc)
      end

      ##
      # Outputs the dict representation of the configmap, templated
      # with the given entries.
      # @param [Array<Kerbi::State::Entry>] entries
      # @return [Hash]
      def template_resource(entries)
        values = { consts::ENTRIES_ATTR => entries.map(&:to_h) }
        opts = { release_name: namespace }
        Kerbi::State::ConfigMapMixer.new(values, **opts).run.first
      end

      ##
      # Creates the required namespace resource for this configmap
      # in the cluster.
      def create_namespace
        opts = { release_name: namespace }
        dict = Kerbi::State::NamespaceMixer.new({}, **opts).run.first
        #noinspection RubyResolve
        client("v1").create_namespace(dict)
      end

      protected

      ##
      # Reads the configmap from Kubernetes, returns its dict representation.
      def load_resource
        #noinspection RubyResolve
        client("v1").get_config_map(cm_name, namespace).to_h
      end

      ##
      # Templates the updated version of the configmap given the entries
      # in memory, and uses the new dict to overwrite the last configmap
      # in the cluster.
      def update_resource
        new_resource = template_resource(entries)
        #noinspection RubyResolve
        client("v1").update_config_map(new_resource)
      end

      ##
      # Deserializes the list of entries in the configmap. Calls
      # #resources, which is memoized, so may trigger a cluster read.
      # @return [Array<Hash>] entries
      def read_entries
        str_entries = resource[:data][:entries]
        JSON.parse(str_entries)
      end

      ## Creates an instance of Kubeclient::Client given
      # the auth_bundle in the state, and a Kubernetes API name
      # like appsV1 (defaults to "v1" if not passed).
      # @return [Kubeclient::Client]
      def client(api_name="v1")
        Kubeclient::Client.new(
          auth_bundle[:endpoint],
          api_name,
          **auth_bundle[:options]
        )
      end

      def consts
        Kerbi::State::Consts
      end

      def cm_name
        consts::RESOURCE_NAME
      end
    end
  end
end